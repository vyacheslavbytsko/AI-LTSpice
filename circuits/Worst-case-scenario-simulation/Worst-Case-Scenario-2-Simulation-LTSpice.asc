Version 4
SHEET 1 2076 736
WIRE -48 48 -96 48
WIRE 176 48 16 48
WIRE 176 64 176 48
WIRE -96 144 -96 48
WIRE 176 160 176 144
WIRE 432 160 176 160
WIRE 480 160 432 160
WIRE 176 176 176 160
WIRE 480 176 480 160
WIRE -96 288 -96 224
WIRE 176 288 176 256
WIRE 480 288 480 240
FLAG -96 288 0
FLAG 176 288 0
FLAG 480 288 0
FLAG 432 160 Vout
SYMBOL voltage -96 128 R0
WINDOW 123 24 124 Left 2
WINDOW 39 0 0 Left 0
SYMATTR InstName V1
SYMATTR Value ""
SYMATTR Value2 AC 1
SYMBOL cap 16 32 R90
WINDOW 0 0 32 VBottom 2
WINDOW 3 34 -15 VTop 2
SYMATTR InstName C1
SYMATTR Value {wc(10u, tolb,0)}
SYMBOL res 160 48 R0
SYMATTR InstName R1
SYMATTR Value {wc(10k, tola,1)}
SYMBOL res 160 160 R0
SYMATTR InstName R2
SYMATTR Value {wc(10k, tola,2)}
SYMBOL cap 464 176 R0
SYMATTR InstName C2
SYMATTR Value {wc(1u, tolb,3)}
TEXT -72 384 Left 2 !.param tola=0.1
TEXT -72 416 Left 2 !.param tolb=0.2
TEXT -360 520 Left 2 !.step param run 0 16 1
TEXT -360 568 Left 2 !.ac dec 10 1 1k
TEXT -344 384 Left 2 ;Resistors' tolerance 10%
TEXT -360 416 Left 2 ;Capacitors' tolerance 20%
TEXT -152 -176 Left 4 ;Worst Case Scenario analysis in LTSpiceIV
TEXT -352 664 Left 2 !.function binary_digit(x, powerOfTwo) floor(x/(2**powerOfTwo)) - 2*floor(x/(2**(powerOfTwo + 1)))
TEXT -352 712 Left 2 !.function wc(nom, tol, powerOfTwo) if(run==16, nom, if(binary_digit(run, powerOfTwo), nom*(1 + tol), nom*(1 - tol) ) )
TEXT 928 -56 Left 2 ;From Harry's comment at https://k6jca.blogspot.com/2012/07/monte-carlo-and-worst-case-circuit.html\n \nLet's say you have 4 components that you wish to vary over their tolerance range.\nYou require 2^4 + 1 runs (i.e., 17) to cover all the worst case combinations, \nplus 1 run with all values equal to their nominal.\n \nSet the number of runs as follows: .step param run 0 16 1\n \nNow, assign the values of the components as follows:\n \ncomponent 1: {wc(nominal_value,tolerance,0)}\ncomponent 2: {wc(nominal_value,tolerance,1)}\ncomponent 3: {wc(nominal_value,tolerance,2)}\ncomponent 4: {wc(nominal_value,tolerance,3)}\n \nFinally, replace "y" in the "wc" function with "16"\n \nNow when you do your simulation run, you are guaranteed to have simulated\nall 16 different possible combinations of component value extremes exactly\n once each. Another benefit of this approach is that when looking at the\nresults you can determine the actual component values used for a given result.
